lexer:
"+" {return ADD;}
"-" {return SUB;}
"*" {return MUL;}
"/" {return DIV;}

////////////////////////////////////////////////////////////
parser:
%type<number> exp 
%type<number> factor
//%type<charcter> id
%token ADD SUB MUL DIV
%token EOL 

var: type ID EOL {printf("id with no value \n");} working
  | type ID '=' NUMBER EOL {printf("id with value \n");}
  ;

input: 
  | exp EOL {printf("%d \n",$1);}
  | EOL
  ;

exp: factor
  | exp ADD factor {$$ = $1 + $3;}
  | exp SUB factor {$$ = $1 - $3;}
  ;

factor: term
  | factor MUL term {$$ = $1 * $3;}
  | factor DIV term {$$ = $1 / $3;}
  ;

term: NUMBER;